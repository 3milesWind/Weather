{"version":3,"sources":["components/Card.jsx","screens/ForcastScreen.js","screens/AboutScreen.js","components/WeatherCard.jsx","screens/WeatherScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","this","item","dt_txt","main","temp","temp_max","temp_min","weather","description","humidity","pressure","wind","speed","deg","React","Component","ForcastScreen","handleChange","ev","setState","query","target","value","handleSubmit","PreviousCity","state","city","componentDidMount","country","posts","coord_lat","coord_lon","axios","get","API","then","res","data","list","name","coord","lat","lon","console","log","catch","error","alert","Segment","inverted","Container","Menu","secondary","Item","position","type","onChange","onClick","style","margin","fontSize","magin","color","map","key","dt","AboutScreen","textAlign","backgroundColor","fontWeight","height","sys","WeatherScreen","event","info","bind","NewInfo","concat","filter","el","index","App","path","exact","component","Navbar","variant","expand","fixed","to","as","Link","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e967da1d.chunk.js","sourcesContent":["/**\n * 显示每一天的weather用的Card\n * 你当然也可以无视这个component，\n * 用别的UI库的Card，\n * 或者自己写别的样子的Card\n */\n\nimport React from \"react\";\nimport \"./Card.css\";\nexport default class Card extends React.Component {\n  //uncomment below to use the constructor to set props\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"cards\">\n        <div className=\"time\">{this.props.item.dt_txt}</div>\n        <div className=\"data\">\n          <h5>Temperature:{this.props.item.main.temp}</h5>\n          <p>maximum Temperature:{this.props.item.main.temp_max}</p>\n          <p>minimum Temperature:{this.props.item.main.temp_min}</p>\n          <hr />\n          <h5>Weather:{this.props.item.weather[0].description}</h5>\n          <p>humidity:{this.props.item.main.humidity}</p>\n          <p>pressure:{this.props.item.main.pressure}</p>\n          <hr />\n          <h5>Wind</h5>\n          <p>wind speed:{this.props.item.wind.speed}</p>\n          <p>wind degree:{this.props.item.wind.deg}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * TODO:\n * 实现可以在搜索框里输入城市的英文名称，\n * 然后更新此页面的data为相应的城市的天气预报\n * 更新方式为：页面上方的city和country的名字会发生相应的改变\n * 并生成40张Card，每张Card里面为获取到的天气list中3个小时的数据\n *\n * 现在页面刚mount的时候会触发componentDidMount来获取chengdu的天气data\n *\n * Extra Credit：\n * 搜索的城市不存在时，用alert() 向用户报错\n */\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Menu, Segment, Container } from \"semantic-ui-react\";\nimport \"./ForcastScreen.css\";\nimport Card from \"../components/Card\";\n\nconst API = \"https://api.openweathermap.org/data/2.5/forecast?q=\";\nconst APPID = \"&APPID=eda439d629165a345559e6e9043cf085&units=\";\nconst UNIT = \"metric\";\n\nclass ForcastScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    //set initial state\n    this.state = {\n      city: \"chengdu\",\n      country: \"\",\n      posts: [],\n      query: \"\",\n      coord_lat: \"\",\n      coord_lon: \"\",\n      PreviousCity: \"\",\n    };\n  }\n\n  componentDidMount() {\n    //从state中获取当前city的名字\n    const { city } = this.state;\n\n    axios\n      .get(API + city + APPID + UNIT)\n      //if success\n      .then((res) => {\n        const data = res.data;\n        this.setState({\n          posts: data.list,\n          city: data.city.name,\n          country: data.city.country,\n          coord_lat: data.city.coord.lat,\n          coord_lon: data.city.coord.lon,\n        });\n        console.log(res);\n      })\n      //if error\n      .catch((error) => {\n        this.setState({\n          city: this.state.PreviousCity,\n        });\n        alert(\"The City does not exist in the list\");\n        console.log(error);\n      });\n  }\n\n  /**\n   * incomplete---check\n   */\n  handleChange = (ev) => {\n    this.setState({\n      query: ev.target.value,\n    });\n  };\n\n  /**\n   * incomplete-->check\n   *\n   */\n  handleSubmit = (ev) => {\n    this.setState(\n      {\n        PreviousCity: this.state.city,\n        city: this.state.query,\n      },\n      () => {\n        this.componentDidMount();\n      }\n    );\n  };\n\n  render() {\n    const { city, country, posts, coord_lat, coord_lon } = this.state;\n    return (\n      <div>\n        <Segment inverted>\n          <Container>\n            <Menu inverted secondary>\n              <Menu.Item position=\"left\">\n                <h1>Weather</h1>\n              </Menu.Item>\n              <Menu.Item>\n                <h1>Get forcasts</h1>\n              </Menu.Item>\n              <Menu.Item position=\"right\">\n                {/* 需要给input的onChange props传入相应function，从而每一次input的值改变的时候，state里相应的值会发生改变 */}\n                <input type=\"text\" onChange={this.handleChange} />\n\n                {/* 需要给button的onClick props传入相应function，在function里触发axios请求，从API获取新的data */}\n                <button onClick={this.handleSubmit}>Search</button>\n              </Menu.Item>\n            </Menu>\n          </Container>\n        </Segment>\n        <Container>\n          {/* 此处需要根据当前城市进行动态更新 */}\n          <div className=\"City_panel\">\n            <h1 style={{ margin: \"10px 0px\" }}>{city}</h1>\n            <hr />\n            <h2 style={{ fontSize: \"20px\", margin: \"10px 0px\" }}>{country}</h2>\n            <hr />\n            <h2\n              style={{\n                fontSize: \"15px\",\n                magin: \"10px 0px\",\n                color: \"#6c757d\",\n              }}\n            >\n              \blat: {coord_lat} lon:{coord_lon}\n            </h2>\n          </div>\n          {/* 用获得的天气data生成Cards \n                        不要hard code，请用map()来批量生成\n                        例如this.state.data.map(elem => (<Card/>))\n                    */}\n          {posts.map((item) => (\n            <Card key={item.dt} item={item} />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default ForcastScreen;\n","/**\n * About Screen\n * 简单写一下这个App是用来干嘛的\n * 要求文字对称，\n * 不能全部顶格排布在最左边\n */\nimport React from \"react\";\nimport \"./AboutScreen.css\";\nexport default function AboutScreen() {\n  return (\n    <form className=\"textbox\">\n      <h1\n        style={{\n          color: \"white\",\n          textAlign: \"center\",\n          fontSize: \"45px\",\n        }}\n      >\n        Hello, World!\n      </h1>\n      <hr style={{ backgroundColor: \"white\", margin: \"10px\" }} />\n      <h4\n        style={{\n          textAlign: \"center\",\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: \"30px\",\n        }}\n      >\n        Forcast:\n      </h4>\n      <h6 className=\"context\">\n        This allows you to add a five day forecast info by the interval three\n        hours. By the beginning of the each forcast, the system will also\n        automatically present you with some basic info on the city you are\n        searching. Click the \"delete\" button to delete any unwanted group of\n        predications.\n      </h6>\n    </form>\n  );\n}\n","/**\n * 显示每一天的weather用的Card\n * 你当然也可以无视这个component，\n * 用别的UI库的Card，\n * 或者自己写别的样子的Card\n */\n\nimport React from \"react\";\nimport \"./Card.css\";\nexport default class Card extends React.Component {\n  //uncomment below to use the constructor to set props\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div style={{ height: \"230px\" }} className=\"cards\">\n        <div\n          className=\"time\"\n          style={{ fontSize: \"30px\", color: \"black\", fontWeight: \"500\" }}\n        >\n          {this.props.item.name}\n        </div>\n        <div className=\"data\">\n          <h5>Temperature:{this.props.item.main.temp}</h5>\n          <h5>Weather:{this.props.item.weather[0].description}</h5>\n          <p>a city in:{this.props.item.sys.country}</p>\n          <p>longitude:{this.props.item.coord.lat}</p>\n          <p>latitude:{this.props.item.coord.lon}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * 显示各种城市当前天气的screen\n *\n * 要求：\n * 像ForcastScreen一样，在右上角添加searchBar，\n * 输入城市名字并点add之后，add一张有被搜索城市的天气的card到当前屏幕\n *\n * Extra Credit：\n * 当前被搜索城市名不存在时用alert() 报错\n */\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Menu, Segment, Container } from \"semantic-ui-react\";\nimport \"./WeatherScreen.css\";\nimport WeatherCard from \"../components/WeatherCard\";\nconst API = \"https://api.openweathermap.org/data/2.5/weather?q=\";\nconst APPID = \"&APPID=eda439d629165a345559e6e9043cf085&units=\";\nconst UNIT = \"metric\";\n\nexport default class WeatherScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"chengdu\",\n      info: [],\n      query: \"\",\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { city } = this.state;\n\n    axios\n      .get(API + city + APPID + UNIT)\n      .then((res) => {\n        const data = res.data;\n        const NewInfo = this.state.info.concat(data);\n        this.setState({\n          city: data.name,\n          info: NewInfo,\n        });\n        // console.log(\"weather data:  \", res);\n      })\n      .catch((error) => {\n        alert(\"The city does not exist-----\");\n        console.log(error);\n      });\n  }\n  //get the infor from the search bar\n  handleChange = (event) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n  //process request for weather card\n  handleSubmit() {\n    this.setState(\n      {\n        city: this.state.query,\n      },\n      () => {\n        this.componentDidMount();\n      }\n    );\n  }\n  render() {\n    const { info } = this.state;\n    return (\n      <div>\n        <Segment inverted>\n          <Container>\n            <Menu inverted secondary>\n              <Menu.Item position=\"left\">\n                <h1>Weather</h1>\n              </Menu.Item>\n              <Menu.Item>\n                <h1>Get Current Weather</h1>\n              </Menu.Item>\n              <Menu.Item position=\"right\">\n                <input type=\"text\" onChange={this.handleChange} />\n                <button onClick={this.handleSubmit}>Add</button>\n              </Menu.Item>\n            </Menu>\n          </Container>\n        </Segment>\n\n        <Container>\n          {info\n            .filter((el, index) => index >= 1)\n            .map((item, index) => (\n              <WeatherCard key={index} item={item} />\n            ))}\n        </Container>\n      </div>\n    );\n  }\n}\n","/**\n * 这个component不用改\n */\n\nimport React from \"react\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Menu, Container } from \"semantic-ui-react\";\n\nimport ForcastScreen from \"./screens/ForcastScreen\";\nimport AboutScreen from \"./screens/AboutScreen\";\nimport WeatherScreen from \"./screens/WeatherScreen\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Route path=\"/Weather_app\" exact={true} component={AboutScreen} />\n          <Route path=\"/forcast\" exact={true} component={ForcastScreen} />\n          <Route path=\"/weather\" exact={true} component={WeatherScreen} />\n          <div style={{ height: 100 }}></div>\n          <Navbar\n            style={{ backgroundColor: \"#1c1c1c\" }}\n            variant=\"dark\"\n            expand=\"lg\"\n            fixed=\"bottom\"\n          >\n            <Container>\n              <Menu inverted>\n                <Menu.Item to=\"/Weather_app\" as={Link}>\n                  <h4>About</h4>\n                </Menu.Item>\n                <Menu.Item to=\"/forcast\" as={Link}>\n                  <h4>Forcast</h4>\n                </Menu.Item>\n                <Menu.Item to=\"/weather\" as={Link}>\n                  <h4>Weather</h4>\n                </Menu.Item>\n              </Menu>\n            </Container>\n          </Navbar>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}